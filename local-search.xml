<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Mysql笔记</title>
    <link href="/2022/11/19/Mysql%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/11/19/Mysql%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="Mysql学习笔记"><a href="#Mysql学习笔记" class="headerlink" title="Mysql学习笔记"></a>Mysql学习笔记</h3><hr><h4 id="创建数据库命令"><a href="#创建数据库命令" class="headerlink" title="创建数据库命令"></a>创建数据库命令</h4><ol><li><p><code>SHOW DATABASES;</code> <code>SHOW TABLES;</code>显示数据库&#x2F;数据表预览。</p></li><li><p><code>USE [database_name];</code>进入到数据库database_name中。</p></li><li><p><code>CREATE DATABASE [DATABASE_NAME];</code>创建名为DATABASE_NAME的数据库。</p></li><li><p><code>CREATE TABLE [table_name] (column_name1 column properties,column_name1 column properties,...);</code>创建数据表名称为table_name，字段名称以及相应的属性为括号中所描述的。</p></li></ol><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><ol><li><p><code>INSERT INTO [table_name] values (data1,data2,...);</code>向表table_name中插入数据。</p></li><li><p><code>INSERT INTO [table_name] (column1,column2) values (data1,data2);</code>向指定列插入数据。</p></li><li><p><code>INSERT INTO [table_name] values (data1,data2,...),(data1,data2,...);</code>插入多条记录的数据。</p></li></ol><h4 id="MySql数据类型"><a href="#MySql数据类型" class="headerlink" title="MySql数据类型"></a>MySql数据类型</h4><ol><li>基本数字类型</li></ol><table><thead><tr><th align="left">数据类型</th><th align="left">含义</th><th align="left">表示范围</th></tr></thead><tbody><tr><td align="left"><code>INT</code></td><td align="left">整数</td><td align="left">4Byte -2147483648〜2147483647</td></tr><tr><td align="left"><code>TINYINT</code></td><td align="left">极小的整数</td><td align="left">1Byte -128〜127</td></tr><tr><td align="left"><code>SMALLINT</code></td><td align="left">小整数</td><td align="left">2Byte -32768〜32767</td></tr><tr><td align="left"><code>MEDIUMINT</code></td><td align="left">中等的整数</td><td align="left">3Byte -8388608〜8388607</td></tr><tr><td align="left"><code>BIGINT</code></td><td align="left">大整数</td><td align="left">8Byte -9223372036854775808〜9223372036854775807</td></tr><tr><td align="left"><code>FLOAT</code></td><td align="left">单精度浮点数</td><td align="left">4Byte</td></tr><tr><td align="left"><code>DOUBLE</code></td><td align="left">双精度浮点数</td><td align="left">8Byte</td></tr><tr><td align="left"><code>DECIMAL(M,D)</code></td><td align="left">精确小数</td><td align="left">DECIMAL 可能的最大取值范围与 DOUBLE 相同，但是有效的取值范围由 M 和 D 决定。如果改变 M 而固定 D，则取值范围将随 M 的变大而变大。</td></tr></tbody></table><ol start="2"><li>字符串类型</li></ol><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td><code>CHAR(M)</code></td><td>固定长度非二进制字符串</td><td>M 字节，1&lt;&#x3D;M&lt;&#x3D;255</td></tr><tr><td><code>VARCHAR(M)</code></td><td>变长非二进制字符串</td><td>L+1字节，在此，L&lt; &#x3D; M和 1&lt;&#x3D;M&lt;&#x3D;255</td></tr><tr><td><code>TINYTEXT</code></td><td>非常小的非二进制字符串</td><td>L+1字节，在此，L&lt;2^8</td></tr><tr><td><code>TEXT</code></td><td>小的非二进制字符串</td><td>L+2字节，在此，L&lt;2^16</td></tr><tr><td><code>MEDIUMTEXT</code></td><td>中等大小的非二进制字符串</td><td>L+3字节，在此，L&lt;2^24</td></tr><tr><td><code>LONGTEXT</code></td><td>大的非二进制字符串</td><td>L+4字节，在此，L&lt;2^32</td></tr><tr><td><code>ENUM</code></td><td>枚举类型，只能有一个枚举字符串值</td><td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td></tr><tr><td><code>SET</code></td><td>一个设置，字符串对象可以有零个或 多个SET成员</td><td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td></tr></tbody></table><p><code>CHAR(M)</code> 为固定长度字符串，在定义时指定字符串列长。当保存时，在右侧填充空格以达到指定的长度。M 表示列的长度，范围是 0～255 个字符。</p><p>例如，<code>CHAR(4)</code> 定义了一个固定长度的字符串列，包含的字符个数最大为 4。当检索到 CHAR 值时，尾部的空格将被删除。</p><p>例如，<code>VARCHAR(50)</code> 定义了一个最大长度为 50 的字符串，如果插入的字符串只有 10 个字符，则实际存储的字符串为 10 个字符和一个字符串结束字符。<code>VARCHAR</code> 在值保存和检索时尾部的空格仍保留。</p><p><code>TEXT</code> 列保存非二进制字符串，如文章内容、评论等。当保存或查询 <code>TEXT</code> 列的值时，不删除尾部空格。</p><ol start="3"><li>日期类型</li></ol><table><thead><tr><th>类型名称</th><th>日期格式</th><th>日期范围</th><th>存储需求</th></tr></thead><tbody><tr><td><code>YEAR</code></td><td>YYYY</td><td>1901 ~ 2155</td><td>1Byte</td></tr><tr><td><code>TIME</code></td><td>HH:MM:SS</td><td>-838:59:59 ~ 838:59:59</td><td>3Byte</td></tr><tr><td><code>DATE</code></td><td>YYYY-MM-DD</td><td>1000-01-01 ~ 9999-12-3</td><td>3Byte</td></tr><tr><td><code>DATETIME</code></td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td><td>8Byte</td></tr><tr><td><code>TIMESTAMP</code></td><td>YYYY-MM-DD HH:MM:SS</td><td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td><td>4Byte</td></tr></tbody></table><p><code>TIMESTAMP</code> 的显示格式与 <code>DATETIME</code> 相同，显示宽度固定在 19 个字符，日期格式为 <code>YYYY-MM-DD HH：MM：SS</code>，在存储时需要 4 个字节。但是 <code>TIMESTAMP</code> 列的取值范围小于 DATETIME 的取值范围，为 ‘1970-01-01 00：00：01’UTC～’2038-01-19 03：14：07’UTC。在插入数据时，要保证在合法的取值范围内。</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络：自顶向下</title>
    <link href="/2022/11/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9A%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/"/>
    <url>/2022/11/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9A%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="《计算机网络——自顶向下》"><a href="#《计算机网络——自顶向下》" class="headerlink" title="《计算机网络——自顶向下》"></a>《计算机网络——自顶向下》</h1><h2 id="1-应用层"><a href="#1-应用层" class="headerlink" title="1 应用层"></a>1 应用层</h2><h3 id="1-1-Socket套接字"><a href="#1-1-Socket套接字" class="headerlink" title="1.1 Socket套接字"></a>1.1 Socket套接字</h3><p>在介绍应用层前，本书花费重墨讲解了Socket。</p><p>套接字(Socket)是应用层与传输层的重要媒介，例如HTTP协议可以使用Socket与传输层的TCP交互。Java中使用<code>java.net.Socket </code>和<code>jave.net.ServerSocket</code>类实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketServerDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8080</span>);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">accept</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>                <span class="hljs-comment">//开启一个新线程用于处理返回的Socket</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SocketHandler</span>(accept)).start();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">SocketHandler</span><span class="hljs-params">(Socket socket)</span>&#123;<br>            <span class="hljs-built_in">this</span>.socket = socket;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>                <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>                <span class="hljs-keyword">while</span> (inputStream.read(buffer)!=-<span class="hljs-number">1</span>)&#123;<br>                    System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer));<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-HTTP协议"><a href="#1-2-HTTP协议" class="headerlink" title="1.2 HTTP协议"></a>1.2 HTTP协议</h3>]]></content>
    
    
    
    <tags>
      
      <tag>计算网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytoch使用手册(持续更新中)</title>
    <link href="/2022/05/06/Pytorch%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <url>/2022/05/06/Pytorch%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="Pytorch使用手册"><a href="#Pytorch使用手册" class="headerlink" title="Pytorch使用手册"></a>Pytorch使用手册</h1><hr><h2 id="1-tensor对象相关属性"><a href="#1-tensor对象相关属性" class="headerlink" title="1 tensor对象相关属性"></a>1 tensor对象相关属性</h2><h3 id="1-1-shape属性"><a href="#1-1-shape属性" class="headerlink" title="1.1 shape属性"></a>1.1 <code>shape</code>属性</h3><pre><code class="hljs">shape类型还是Size类型，表示举证或者向量的维度或者长度。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">x = torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(x.shape)<br>y = torch.tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span> ,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<br><span class="hljs-built_in">print</span>(y.shape)<br>&gt;&gt;&gt;<br>torch.Size([<span class="hljs-number">3</span>])<br>torch.Size([<span class="hljs-number">2</span> ,<span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure></code></pre><h3 id="1-2-data-grad属性"><a href="#1-2-data-grad属性" class="headerlink" title="1.2 data,grad属性"></a>1.2 <code>data</code>,<code>grad</code>属性</h3><pre><code class="hljs">data属性可以查看tensor中的元素,其类型仍然是tensor类型。grad和data类型一致，都是tensor类型，描述的是tensor中元素的梯度。Pytorch和Numpy一样，都可以对运算过程中(使用backward()函数反向传播)涉及到的参数求导，其导数(梯度)便保存在grad属性中。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">x = torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(x.data)<br>&gt;&gt;&gt;<br>tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>&gt;&gt;&gt;<br>x = torch.tensor([<span class="hljs-number">2.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">6.</span>])<br>x.requires_grad = <span class="hljs-literal">True</span>  <span class="hljs-comment"># 开启梯度</span><br>y = x.T * x * <span class="hljs-number">2</span>  <span class="hljs-comment"># 开始构建计算图</span><br>y.<span class="hljs-built_in">sum</span>().backward()<br><span class="hljs-built_in">print</span>(x.grad)<br>&gt;&gt;&gt;<br>tensor([ <span class="hljs-number">8.</span>, <span class="hljs-number">16.</span>, <span class="hljs-number">24.</span>])<br></code></pre></td></tr></table></figure></code></pre><h2 id="2-操作矩阵相关函数"><a href="#2-操作矩阵相关函数" class="headerlink" title="2 操作矩阵相关函数"></a>2 操作矩阵相关函数</h2><h3 id="2-1-torch-tensor-data-dtype"><a href="#2-1-torch-tensor-data-dtype" class="headerlink" title="2.1 torch.tensor(data,dtype)"></a>2.1 <code>torch.tensor(data,dtype)</code></h3><pre><code class="hljs">可以读取接收list数据，直接转化成pytorch中的Tensor类型的数据使用dtype可以指定tensor中的数据元素类型<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">data = [<span class="hljs-number">1</span> ,<span class="hljs-number">2</span> ,<span class="hljs-number">3</span>]<br>torch.tensor(data ,dtype=torch.<span class="hljs-built_in">int</span>)<br><br>&gt;&gt;&gt;<br>tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], dtype=torch.int32)<br></code></pre></td></tr></table></figure></code></pre><h3 id="2-2-torch-repeat-interleave-或者tensor-repeat-interleave"><a href="#2-2-torch-repeat-interleave-或者tensor-repeat-interleave" class="headerlink" title="2.2 torch.repeat_interleave()或者tensor.repeat_interleave()"></a>2.2 <code>torch.repeat_interleave()</code>或者<code>tensor.repeat_interleave()</code></h3><h3 id="2-3-torch-repeat-repeatsize0-repeatsize1-或者tensor-repeat-repeatsize0-repeatsize1"><a href="#2-3-torch-repeat-repeatsize0-repeatsize1-或者tensor-repeat-repeatsize0-repeatsize1" class="headerlink" title="2.3 torch.repeat(repeatsize0,repeatsize1,...)或者tensor.repeat(repeatsize0,repeatsize1,...)"></a>2.3 <code>torch.repeat(repeatsize0,repeatsize1,...)</code>或者<code>tensor.repeat(repeatsize0,repeatsize1,...)</code></h3><pre><code class="hljs">`repeat()`操作可以用来对向量或者举证进行填充升维度，不过操作时是在指定维度上进行复制操作。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">x = torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(x.shape)<br><span class="hljs-built_in">print</span>(x)<br>x = x.repeat(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(x.shape)<br><span class="hljs-built_in">print</span>(x)<br>&gt;&gt;<br>torch.Size([<span class="hljs-number">2</span>])<br>tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br>torch.Size([<span class="hljs-number">3</span>, <span class="hljs-number">2</span>])<br>tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]])<br></code></pre></td></tr></table></figure>可以看出repeat(3, 1)操作在原来的tensor([1, 2])基础上，在0-xios复制了三行，而1-xios没有复制。tensor从原先的1维升成2维。</code></pre><h3 id="2-4-torch-view-dim0-dim1-或者tensor-view-dim0-dim1"><a href="#2-4-torch-view-dim0-dim1-或者tensor-view-dim0-dim1" class="headerlink" title="2.4. torch.view(dim0,dim1,...)或者tensor.view(dim0,dim1,...)"></a>2.4. <code>torch.view(dim0,dim1,...)</code>或者<code>tensor.view(dim0,dim1,...)</code></h3><pre><code class="hljs">`view()`和`reshape()`一样都可以用来改变矩阵的形状。其中dim0表示第0维的长度，dim1表示第1维的长度......以此类推。其中-1表示任意填充长度。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">x = torch.arange(<span class="hljs-number">0</span>, <span class="hljs-number">12</span>)<br><span class="hljs-built_in">print</span>(x.shape)<br>x = x.view(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(x.shape)<br><span class="hljs-built_in">print</span>(x)<br><br>&gt;&gt;&gt;<br>tensor([ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>])<br>torch.Size([<span class="hljs-number">12</span>])<br>torch.Size([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br>tensor([[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>],<br>    [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>],<br>    [ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]])<br></code></pre></td></tr></table></figure></code></pre><h3 id="2-5-torch-cat-x-y-dim-或者tensor-cat-x-y-dim"><a href="#2-5-torch-cat-x-y-dim-或者tensor-cat-x-y-dim" class="headerlink" title="2.5 torch.cat((x,y),dim)或者tensor.cat((x,y),dim)"></a>2.5 <code>torch.cat((x,y),dim)</code>或者<code>tensor.cat((x,y),dim)</code></h3><pre><code class="hljs">cat()操作用来拼接两个形状相同的举证或者向量，可以使用dim参数指定所需要的方向。</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度学习DL学习笔记——RNN(持续更新中)</title>
    <link href="/2022/05/02/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0DL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94RNN/"/>
    <url>/2022/05/02/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0DL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94RNN/</url>
    
    <content type="html"><![CDATA[<h3 id="RNN——循环神经网络"><a href="#RNN——循环神经网络" class="headerlink" title="RNN——循环神经网络"></a>RNN——循环神经网络</h3><hr><h4 id="RNN概述"><a href="#RNN概述" class="headerlink" title="RNN概述"></a>RNN概述</h4><p>循环神经网络（Recurrent Neural Network, RNN）是一类以序列（sequence）数据为输入，在序列的演进方向进行递归（recursion）且所有节点（循环单元）按链式连接的递归神经网络(recursive neural network)。</p><h4 id="推导公式"><a href="#推导公式" class="headerlink" title="推导公式"></a>推导公式</h4><p>RNN循环神经网络，作为连接主义的一种形式，本质仍然是一种矩阵运算。一个完整的RNN网络的一次运算展开结果就如下图所示：</p><p><img src="https://gitee.com/porridgez/myPictureBase/raw/master/rnn.jpg" alt="RNN"></p><p>在完整的RNN中：</p><ol><li><p>$x_t$向量表示输入的数据,其大小为hidden_size</p></li><li><p>$h_t$向量为RNN隐藏层输入和输出,大小为hidden_size</p></li></ol><p>RNN的计算公式如下：</p><p>$$h_1 &#x3D; tanh(w_{hidden_{size} * {input_size} }<em>x_1+w_{ {hidden_size}</em>{hidden_size} }*h_0+b)$$</p><p>$$h_2 &#x3D; tanh(w_{hidden_{size} * {input_size}}<em>x_2+w_{ {hidden_size}</em>{hidden_size} }*h_1+b)$$</p><p>$$…$$</p><p>$$h_t &#x3D; tanh(w_{hidden_{size} * {input_size}}<em>x_t+w_{ {hidden_size}</em>{hidden_size} }*h_{t-1}+b)$$</p><p>在一次反向传播后，对模型参数<br>$$w_{hidden_{size} * {input_size} }$$<br>$$w_{ {hidden_size}*{hidden_size} }$$<br>$$b$$<br>求导，再使用梯度下降，更新模型参数，最终得到完整的RNN模型。</p><h4 id="参数求导过程"><a href="#参数求导过程" class="headerlink" title="参数求导过程"></a>参数求导过程</h4><p>略</p><h3 id="常见的几种循环神经网络"><a href="#常见的几种循环神经网络" class="headerlink" title="常见的几种循环神经网络"></a>常见的几种循环神经网络</h3><hr><p>从推导公式可以看出，传统的RNN再时间步过长(t太长)的情况下，可能会出现梯度爆炸或者梯度消失的情况。LSTM(Long Short-Term Memory)和GRU(Gated Recurrent Unit)的出现弥补了上述两个问题。</p><h4 id="LSTM模型"><a href="#LSTM模型" class="headerlink" title="LSTM模型"></a>LSTM模型</h4><p>略</p><h4 id="GRU模型"><a href="#GRU模型" class="headerlink" title="GRU模型"></a>GRU模型</h4><p>略</p><h3 id="几类特殊的循环神经网络结构"><a href="#几类特殊的循环神经网络结构" class="headerlink" title="几类特殊的循环神经网络结构"></a>几类特殊的循环神经网络结构</h3><hr><h4 id="1-Seq2Seq网络"><a href="#1-Seq2Seq网络" class="headerlink" title="1. Seq2Seq网络"></a>1. Seq2Seq网络</h4><p><img src="https://gitee.com/porridgez/myPictureBase/raw/master/seq2seq.png" alt="Seq2Seq"></p><p>传统的循环神经网络在对序列进行预测时只能给出下一步的预测，而Seq2Seq结构可以在前一段时间序列的基础上，预测下一段时间序列。因此，此模型在自然语言处理(NLP)领域有着广泛的运用。</p><p>$$\overline{x_{m+1}}$$</p>]]></content>
    
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>把我的故事说给你听</title>
    <link href="/2022/04/14/%E6%8A%8A%E6%88%91%E7%9A%84%E6%95%85%E4%BA%8B%E8%AF%B4%E7%BB%99%E4%BD%A0%E5%90%AC/"/>
    <url>/2022/04/14/%E6%8A%8A%E6%88%91%E7%9A%84%E6%95%85%E4%BA%8B%E8%AF%B4%E7%BB%99%E4%BD%A0%E5%90%AC/</url>
    
    <content type="html"><![CDATA[<p>《看雪》2018-12-30</p><p>出门迎雪下，<br>一看还真大。<br>冻死我不怕，<br>只要不融化。</p><p>【就为了押韵摁压呗】</p><hr><p>《复习》2019-1-3<br>   起早贪黑抄笔记，<br>   不到最后不放弃。<br>   只恨当初不争气，<br>   吃饭睡觉打游戏。</p><hr><p>《无题》2019-1-4</p><p>期末复习泪两行。<br>划重点，更紧张。<br>寒冬腊月，找座心凉凉。<br>只为及格无他想，翻试卷，假装忙。 </p><hr><p>《情人节劝学》2019-2-24</p><p>晴空微风送暖日，<br>适逢开学二月天。<br>新年伊始需努力，<br>莫等期末苦作悲。</p><p>【这也能写的出来 真是佩服当初自己的厚脸皮】</p><hr><p>《就医行》2019-3-12<br>羊山旁，地铁长，站内行人来去忙。<br>逢包检，才保险，出行安全毋敷衍。<br>为环保，支付宝，乘车扫码真的好。<br>排长队，看病贵，国家政策不太对。</p><hr><p>《无题》2019-3-24</p><p>没有了顶的床帘<br>遮不住黑夜的亮<br>透得进清晨的光<br>喜爱暗的人<br>也能拥抱明</p><hr><p>《无题》2019-4-16</p><p>茶叶不是花却在开水中绽放<br>泪水积在眼角还要流回眼窝<br>tear和tea一字之差</p><hr><p>《无题》2019-4-21 </p><p>十字路口 车来车往<br>一把拉过你<br>不是怕你被撞<br>而是想你靠我近一点</p><p>【有点小骚】</p><hr><p>《唯物》2019-5-23<br>感情会升华<br>升华是固体物质的变化<br>感情定是物质<br>物质决定意识<br>这，就是唯物</p><p>【哎呀 不行了 现在看我之前的无病呻吟已经快吐了】</p><hr><p>《无题》2019-5-26</p><p>从宿舍的空调房出来<br>迎面五楼阳台的晚风<br>刹那间冷暖交替<br>明显得汗毛发颤<br>没错了 是夏天的味道<br>晚安！没有星空的夜晚<br>晚安！没有你的长夜<br>晚安！晚安！晚安！</p><p>【 这个是凌晨一点多记录在微博上的 那时候真的是连个呼吸都要发微博的】</p><hr><p>《独白》2019-6-18</p><p>你总是喜欢九点去吃早饭<br>十二点半去吃午饭<br>夜幕降临了才去吃晚饭<br>你总是回避人群 说是害怕拥挤<br>却总又不愿独行<br>你说享受孤独的清欢 说安静才是生活的本貌<br>也是你一次又一次将自己置身喧嚣</p><hr><p>《无题》2020-5-5</p><p>每每想到过去的事情<br>眼角还总是会湿润<br>神经思维变成了肌肉记忆<br>多情的人薄情的泪 </p><hr><p>《日食》2020-6-20<br>六月二十一日<br>有日食<br>全国可见<br>我看不见<br>因为有雨<br>真是可惜 </p><p>【人生不如意之事，十之八九呐】</p><hr><p>《记一次没来的雨》2020-7-7</p><p>树上的蝉儿<br>歇斯底里<br>叫得口渴<br>它们在喊<br>说好的雨呢？</p><hr><p>《无题》2020-9-8 </p><p>夜晚的空调<br>一如既往的烦躁<br>我躺在失眠的床上<br>辗转反侧<br>是谁和我共度长夜<br>是你 是他 是她 </p><p>【这怕是考研复习的时候抑郁了吧】</p><hr><p>《犹恐相逢是梦中》2020-9-19</p><p>有些事总说自己忘掉了<br>放下了<br>却能被刻进梦里<br>不停地出现<br>一切恍如昨日</p><hr><p>《打工日记》 2021-2-22<br>正午的阳光让我疲惫<br>夜晚的寒风让我流泪<br>城市的华灯我没沉醉<br>但这个行业让我心碎</p><p>【大四寒假 大冬天的只有我傻傻的为了学校的实习证明真的跑去上班】</p>]]></content>
    
    
    
    <tags>
      
      <tag>一点感伤</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Conda使用手册(持续更新中)</title>
    <link href="/2022/04/14/Conda%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <url>/2022/04/14/Conda%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="Conda使用手册"><a href="#Conda使用手册" class="headerlink" title="Conda使用手册"></a>Conda使用手册</h1><h2 id="1-查看Conda配置信息"><a href="#1-查看Conda配置信息" class="headerlink" title="1 查看Conda配置信息"></a>1 查看Conda配置信息</h2><h3 id="1-1-conda-env-list-查看本机Conda环境。"><a href="#1-1-conda-env-list-查看本机Conda环境。" class="headerlink" title="1.1 conda env list 查看本机Conda环境。"></a>1.1 <code>conda env list </code>查看本机Conda环境。</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># conda environments:</span><br><span class="hljs-comment">#</span><br>base       *  <span class="hljs-regexp">/Users/u</span>serName<span class="hljs-regexp">/opt/</span>anaconda3<br></code></pre></td></tr></table></figure><p>其中bese环境是默认的环境，也就是安装完Conda后就会产生的环境。‘*’代表当前正在使用的环境，后面的路径表示此环境保存的路径。</p><h3 id="1-2-conda-list查看当前环境下的Python包。"><a href="#1-2-conda-list查看当前环境下的Python包。" class="headerlink" title="1.2 conda list查看当前环境下的Python包。"></a>1.2 <code>conda list</code>查看当前环境下的Python包。</h3><h3 id="1-3-conda-V查看当前Conda版本。"><a href="#1-3-conda-V查看当前Conda版本。" class="headerlink" title="1.3 conda -V查看当前Conda版本。"></a>1.3 <code>conda -V</code>查看当前Conda版本。</h3><h2 id="2-创建备份修改删除Conda环境"><a href="#2-创建备份修改删除Conda环境" class="headerlink" title="2 创建备份修改删除Conda环境"></a>2 创建备份修改删除Conda环境</h2><ol><li><p><code>conda create --name [env_name] python= [3.x]</code>创建制定版本的python环境。</p><p><code>conda create --name [env_name] python=[3.x] [numpy]</code>可以创建指定python版本下包含某些包的环境。</p></li><li><p><code>activate [env_name]</code>将当前环境切换到指定环境。</p><p>在某些系统中需要使用<code>source activate env_name</code>进行激活环境。</p></li><li><p><code>deactivate</code>退出当前环境。</p></li><li><p><code>conda remove --name env_name --all</code>删除指定环境。</p></li><li><p><code>conda create --name new_env_name --clone old_env_name</code>克隆某个环境。</p></li><li><p>备份conda环境</p><ul><li><p>进入需要备份的环境下执行<code>conda env export &gt; [environment.yaml]</code></p><p>备份文件保存在当前目录下，文件名为<code>environment.yaml</code>。</p></li><li><p>恢复conda环境</p><p><code>conda env create -f [environment.yaml]</code></p></li></ul></li></ol><h2 id="3-Conda环境下安装Python包"><a href="#3-Conda环境下安装Python包" class="headerlink" title="3 Conda环境下安装Python包"></a>3 Conda环境下安装Python包</h2><ol><li><code>pip install [package_name]</code>或者<code>conda install [package_name]</code>都可以在当前环境下安装python的包。在实际使用过程中，一般两者交替使用，让出现一种方式安装不了的时候可以切换另一种方式尝试一遍。</li><li><code>conda remove [package_name]</code>可以用于删除当前环境下的某个python包。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Conda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis实现多数据源操作</title>
    <link href="/2020/10/10/Mybatis%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E6%93%8D%E4%BD%9C/"/>
    <url>/2020/10/10/Mybatis%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="场景描述："><a href="#场景描述：" class="headerlink" title="场景描述："></a>场景描述：</h2><p>最近，我总是在想会不会出现这样一种情况，在一个不是多模块的项目中，我想连接两个数据库进行操作，该如何办呢。当然，依靠maven构建多模块的微服务项目，可以在每一个模块中操作不同的数据库，但对于一个成熟的小型项目而言，这似乎不是很好的解决方法。</p><p>其实，虽然没吃过猪肉，但还没见过猪跑么。想想那些大型的电商级别的项目，动辄百万的数据方法，肯定是分库、读写分离等等。这其中一定不乏优秀的框架，但今天我就不妨从<code>SpringBoot</code>的对<code>Mybatis</code>的依赖注入和角度，研究一下<code>SpringBoot</code>是如何为<code>Mybatis</code>分配数据源的。</p><h2 id="关于多数据源的理解"><a href="#关于多数据源的理解" class="headerlink" title="关于多数据源的理解"></a>关于多数据源的理解</h2><p><img src="https://gitee.com/porridgez/myPictureBase/raw/master/mybatis1.png" alt="流程图"></p><p>所以任务就变的很明朗了，就是分别注入实现多个<code>DataSource</code>和多个<code>SqlSession</code>再将多个<code>mapper</code>和<code>SqlSession</code>对应起来就完成了Mybatis的初始化。</p><h2 id="Talk-Less-Show-Me-The-Code"><a href="#Talk-Less-Show-Me-The-Code" class="headerlink" title="Talk Less Show Me The Code"></a>Talk Less Show Me The Code</h2><p>1、配置<code>application.yml</code>文件</p><p>这里定义了两个数据源分别是<code>primary datasource</code>和<code>second datasource</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">datasource:</span><br>  <span class="hljs-attr">primary:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>  <span class="hljs-attr">second:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/second_test?serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><h2 id="实现DataSource的初始化-有两种方法"><a href="#实现DataSource的初始化-有两种方法" class="headerlink" title="实现DataSource的初始化:有两种方法"></a>实现<code>DataSource</code>的初始化:有两种方法</h2><p>方法1:使用<code>DataSourceBuilder</code></p><p>​配置主数据源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Primary</span><br><span class="hljs-meta">@Bean(name = &quot;PrimaryDataSourceProperties&quot;)</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;datasource.primary&quot;)</span><br><span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">primaryDataSource</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> DataSourceBuilder.create().build();<br>&#125;<br></code></pre></td></tr></table></figure><p>​配置从数据源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean(name = &quot;SecondDataSourceProperties&quot;)</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;datasource.second&quot;)</span><br><span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">SecondDataSource</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> DataSourceBuilder.create().build();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里值得一提的是<code>DataSource</code>只是获取的连接的接口，是java操作所有类型数据库的规范，所以不能用<code>return new DataSource()</code>的方式直接注入。</p><p>打开<code>DataSourceBuilder</code>的源码可以看到其中保留了常用的<code>DataSource</code>实现类<code>&quot;com.zaxxer.hikari.HikariDataSource&quot;, &quot;org.apache.tomcat.jdbc.pool.DataSource&quot;, &quot;org.apache.commons.dbcp2.BasicDataSource&quot;</code>。</p><p>默认的是实现的<code>HikariDataSource</code>数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceBuilder</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DataSource</span>&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] DATA_SOURCE_TYPE_NAMES = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;com.zaxxer.hikari.HikariDataSource&quot;</span>, <span class="hljs-string">&quot;org.apache.tomcat.jdbc.pool.DataSource&quot;</span>, <span class="hljs-string">&quot;org.apache.commons.dbcp2.BasicDataSource&quot;</span>&#125;;<br><span class="hljs-comment">//......</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DataSourceBuilder&lt;?&gt; create() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceBuilder</span>((ClassLoader)<span class="hljs-literal">null</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DataSourceBuilder&lt;?&gt; create(ClassLoader classLoader) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceBuilder</span>(classLoader);<br>    &#125;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DataSource</span>&gt; type = <span class="hljs-built_in">this</span>.getType();<br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (DataSource)BeanUtils.instantiateClass(type);<br>        <span class="hljs-built_in">this</span>.maybeGetDriverClassName();<br>        <span class="hljs-built_in">this</span>.bind(result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">maybeGetDriverClassName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.properties.containsKey(<span class="hljs-string">&quot;driverClassName&quot;</span>) &amp;&amp; <span class="hljs-built_in">this</span>.properties.containsKey(<span class="hljs-string">&quot;url&quot;</span>)) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> (String)<span class="hljs-built_in">this</span>.properties.get(<span class="hljs-string">&quot;url&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">driverClass</span> <span class="hljs-operator">=</span> DatabaseDriver.fromJdbcUrl(url).getDriverClassName();<br>            <span class="hljs-built_in">this</span>.properties.put(<span class="hljs-string">&quot;driverClassName&quot;</span>, driverClass);<br>        &#125;<br></code></pre></td></tr></table></figure><p><code>DataSourceBuilder</code>可以通过查找路径中的驱动和url从而判断需要实现数据源是哪种。</p><p>方法2:利用<code>DataSourceProperties</code>实现<code>DataSource</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//主数据源</span><br><span class="hljs-meta">@Primary</span><br>  <span class="hljs-meta">@Bean(name = &quot;PrimaryDataSourceProperties&quot;)</span><br>  <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;datasource.primary&quot;)</span><br>  <span class="hljs-keyword">public</span> DataSourceProperties <span class="hljs-title function_">primaryDataSourceProperties</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceProperties</span>();<br>  &#125;<br><br>  <span class="hljs-meta">@Bean(name = &quot;PrimaryDataSource&quot;)</span><br>  <span class="hljs-meta">@Primary</span><br>  <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">PrimaryDataSource</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-keyword">return</span> primaryDataSourceProperties().initializeDataSourceBuilder().build();<br>  &#125;<br><span class="hljs-comment">//从数据源</span><br>  <span class="hljs-meta">@Bean(name = &quot;SecondDataSourceProperties&quot;)</span><br>  <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;datasource.second&quot;)</span><br>  <span class="hljs-keyword">public</span> DataSourceProperties <span class="hljs-title function_">SecondDataSourceProperties</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceProperties</span>();<br>  &#125;<br><br>  <span class="hljs-meta">@Bean(&quot;SecondDataSource&quot;)</span><br>  <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">SecondDataSource</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-keyword">return</span> SecondDataSourceProperties().initializeDataSourceBuilder().build();<br>  &#125;<br></code></pre></td></tr></table></figure><p>上面的思路中我就觉得是通过<code>DataSource</code>来构造<code>SqlSession</code>给<code>Mysql</code>使用，所以我不需要关心构造的<code>DataSource</code>是哪种数据源呀。而且，这种构造方法的拓展性也极大地提高了。</p><h2 id="构造SqlSessionFactory"><a href="#构造SqlSessionFactory" class="headerlink" title="构造SqlSessionFactory"></a>构造<code>SqlSessionFactory</code></h2><p>​主数据源的<code>SqlSessionFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean(name = &quot;PrimarySqlSessionFactory&quot;)</span><br><span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">PrimarySqlSessionFactory</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    SqlSessionFactoryBean sqlSessionFactoryBean=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBean</span>();<br>    sqlSessionFactoryBean.setDataSource(<span class="hljs-built_in">this</span>.PrimaryDataSource());<br>    sqlSessionFactoryBean.setMapperLocations(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PathMatchingResourcePatternResolver</span>().<br>            getResources(<span class="hljs-string">&quot;/mapper/**&quot;</span>));<br>    <span class="hljs-keyword">return</span> sqlSessionFactoryBean.getObject();<br>&#125;<br></code></pre></td></tr></table></figure><p>​从数据源的<code>SqlSessionFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean(name = &quot;SecondSqlSessionFactory&quot;)</span><br>  <span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">SecondSqlSessionFactory</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>      SqlSessionFactoryBean sqlSessionFactoryBean=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBean</span>();<br>      sqlSessionFactoryBean.setDataSource(<span class="hljs-built_in">this</span>.SecondDataSource());<br>      sqlSessionFactoryBean.setMapperLocations(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PathMatchingResourcePatternResolver</span>().<br>              getResources(<span class="hljs-string">&quot;/mapper/**&quot;</span>));<br>      <span class="hljs-keyword">return</span> sqlSessionFactoryBean.getObject();<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="配置MapperScan"><a href="#配置MapperScan" class="headerlink" title="配置MapperScan"></a>配置MapperScan</h2><p>只需要为指定每个mapper对应的<code>sqlSessionFactoryRef</code>就能指定不同的数据源，本例中指定dao层对应的是<code>second datasource</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(basePackages = &quot;top.porridgez.dao&quot; ,sqlSessionFactoryRef = &quot;SecondSqlSessionFactory&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Application.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指Offer算法篇（一）</title>
    <link href="/2020/07/20/%E5%89%91%E6%8C%87Offer%E7%AE%97%E6%B3%95%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2020/07/20/%E5%89%91%E6%8C%87Offer%E7%AE%97%E6%B3%95%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="1、在一个二维数组中，每一行都是按照从左到右递增的顺序排序，每一列都是按照从上到下的递增的顺序排列。完成一个数据的判断函数，要求输入一个这样的的数组，判断数组中是否有这样的整数。"><a href="#1、在一个二维数组中，每一行都是按照从左到右递增的顺序排序，每一列都是按照从上到下的递增的顺序排列。完成一个数据的判断函数，要求输入一个这样的的数组，判断数组中是否有这样的整数。" class="headerlink" title="1、在一个二维数组中，每一行都是按照从左到右递增的顺序排序，每一列都是按照从上到下的递增的顺序排列。完成一个数据的判断函数，要求输入一个这样的的数组，判断数组中是否有这样的整数。"></a>1、在一个二维数组中，每一行都是按照从左到右递增的顺序排序，每一列都是按照从上到下的递增的顺序排列。完成一个数据的判断函数，要求输入一个这样的的数组，判断数组中是否有这样的整数。</h3><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><ol><li>首先选取数组中有上角的元素，如果该数字就是要找的数据，那么就直接返回了true；</li><li>如果此时右上角的这个数大于被查找的数就忽略现在停留的这一列，index下标指向新的元素；</li><li>如果此时右上角的这个数小于被查找的的数，就略现在停留的这一行，index下标指向新的元素；</li><li>转像第一步；</li></ol><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix, <span class="hljs-type">int</span> number)</span> &#123;<br><span class="hljs-comment">// 输入条件判断</span><br><span class="hljs-keyword">if</span> (matrix == <span class="hljs-literal">null</span> || matrix.length &lt; <span class="hljs-number">1</span> || matrix[<span class="hljs-number">0</span>].len gth &lt; <span class="hljs-number">1</span>)<br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> matrix.length; <span class="hljs-comment">// 数组的行数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">cols</span> <span class="hljs-operator">=</span> matrix[<span class="hljs-number">1</span>].length; <span class="hljs-comment">// 数组行的列数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 起始开始的行号</span><br><span class="hljs-type">int</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> cols - <span class="hljs-number">1</span>; <span class="hljs-comment">// 起始开始的列号</span><br><span class="hljs-comment">// 要查找的位置确保在数组之内</span><br><span class="hljs-keyword">while</span> (row &gt;= <span class="hljs-number">0</span> &amp;&amp; row &lt; rows &amp;&amp; col &gt;= <span class="hljs-number">0</span> &amp;&amp; col &lt; cols)&#123;<br><span class="hljs-keyword">if</span> (matrix[row][col] == number) &#123; <span class="hljs-comment">// 如果找到了就直接退</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (matrix[row][col] &gt; number) &#123; <br>        <span class="hljs-comment">// 如果找到的数比要找的数大，说明要找的数在当前数的左边</span><br>col--; <br>        <span class="hljs-comment">// 列数减一，代表向左移动</span><br>&#125; <span class="hljs-keyword">else</span> &#123; <br>        <span class="hljs-comment">// 如果找到的数比要找的数小，说明要找的数在当前数的 </span><br>        row++; <br>        <span class="hljs-comment">// 行数加一，代表向下移动</span><br>&#125; &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、查找字符串数组的最大公共前缀"><a href="#2、查找字符串数组的最大公共前缀" class="headerlink" title="2、查找字符串数组的最大公共前缀"></a>2、查找字符串数组的最大公共前缀</h3><p>要求：编写⼀个函数来查找字符串数组中的最⻓公共前缀。如果不存在公共前缀，返回空字符<br>串 “”。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>查找最大前缀只需要</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExecutorDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String[] strings=&#123;<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-string">&quot;aoaad&quot;</span>,<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-string">&quot;aaaaa&quot;</span>&#125;;<br>        System.out.println(find(strings));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">find</span><span class="hljs-params">(String[] strings)</span>&#123;<br>        StringBuilder stringBuilder=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-type">int</span> length=strings.length;<br>        Arrays.sort(strings);<br>        <span class="hljs-type">int</span> n=Math.max(strings[<span class="hljs-number">0</span>].length(),strings[length-<span class="hljs-number">1</span>].length());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">if</span> (strings[<span class="hljs-number">0</span>].charAt(i)==strings[length-<span class="hljs-number">1</span>].charAt(i))&#123;<br>                stringBuilder.append(strings[<span class="hljs-number">0</span>].charAt(i));<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (stringBuilder.length()==<span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span> ;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stringBuilder.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法随想录</title>
    <link href="/2020/07/20/%E7%AE%97%E6%B3%95%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    <url>/2020/07/20/%E7%AE%97%E6%B3%95%E9%9A%8F%E6%83%B3%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="记录一些自己的算法学习过程"><a href="#记录一些自己的算法学习过程" class="headerlink" title="记录一些自己的算法学习过程"></a>记录一些自己的算法学习过程</h1><h2 id="1-指针法"><a href="#1-指针法" class="headerlink" title="1 指针法"></a>1 指针法</h2><h3 id="1-1-二分查找"><a href="#1-1-二分查找" class="headerlink" title="1.1 二分查找"></a>1.1 二分查找</h3><p>二分法最重要的是掌握运行边界的关系即<code>[left,right]</code>之间的关系,具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//[left,right]情况</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binaySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left&lt;=right)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left+right)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[mid]== target)&#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid] &lt; target)&#123;<br>                left = mid+<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                right = mid-<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><span class="hljs-comment">//[left,right)情况</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binaySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-keyword">while</span> (left&lt;right)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left+right)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[mid]== target)&#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid] &lt; target)&#123;<br>                left = mid+<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                right = mid;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-搜索插入位置-Lc35"><a href="#1-2-搜索插入位置-Lc35" class="headerlink" title="1.2 搜索插入位置(Lc35)"></a>1.2 搜索插入位置(Lc35)</h3><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。请必须使用时间复杂度为 <code>O(log n)</code> 的算法。注意数组中的元素是不重复的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//本题其实就是二分查找的变形 值得注意的是变换区间的时候 需要将不能再使用mid-1和mid+1这种取值。</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">searchInsert</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-keyword">if</span> (target&gt;nums[nums.length-<span class="hljs-number">1</span>])&#123;<br>            <span class="hljs-keyword">return</span> nums.length;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(target&lt;=nums[<span class="hljs-number">0</span>])&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> right=nums.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left+right)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span> (left &lt; right-<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span>(nums[mid]==target) &#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid]&lt;target)&#123;<br>                left = mid;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                right = mid;<br>            &#125;<br>            mid = (left+right)/<span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-移除元素（Lc27）"><a href="#1-3-移除元素（Lc27）" class="headerlink" title="1.3 移除元素（Lc27）"></a>1.3 移除元素（Lc27）</h3><p>​给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要原地移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并原地修改输入数组。元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p>​思路一：双层for循环，第一层for用于寻找对应数值，第二层for用于寻找到非<code>val</code>的元素并交换。</p><p>​思路二：快慢指针，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//双层for循环解法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=nums.length-<span class="hljs-number">1</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span> (nums[i] == val)&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>; j&lt;=nums.length-<span class="hljs-number">1</span>;j++)&#123;<br>                    <span class="hljs-keyword">if</span>(nums[j]!=val)&#123;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> nums[j];<br>                        nums[j]=nums[i];<br>                        nums[i]=temp;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;nums.length;j++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[j]==val)&#123;<br>                count++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums.length-count;<br>    &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">快慢指针(双指针)：包括一个快指针，和一个慢指针。快指针用于寻找新元素，慢指针用于记录保留下来的数组。slow初始化为0，表示空白数组。其中，当快指针遇到非val的元素后，就会将元素和slow指向的元素交换，交换后slow和fast同时前进，否则fast单独前进。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;fast&lt;=nums.length-<span class="hljs-number">1</span>;fast++)&#123;<br>            <span class="hljs-keyword">if</span> (nums[fast] != val)&#123;<br>                nums[slow] = nums[fast];<br>                slow++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-有序数组的平方-Lc977"><a href="#1-4-有序数组的平方-Lc977" class="headerlink" title="1.4 有序数组的平方(Lc977)"></a>1.4 有序数组的平方(Lc977)</h3><p>​给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//简单思路：先平方再排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] sortedSquares(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)&#123;<br>            nums[i] = nums[i]*nums[i];<br>        &#125;<br>        Arrays.sort(nums);<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br><br><span class="hljs-comment">//双指针算法</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">数组中元素配方后最大一定是负数中的最小的以及正数中的最大的，所以初始化两个指针一指向开头 一个指向结尾，两个指针向中间靠拢，所得元素逐渐减小。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] sortedSquares(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-type">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> nums.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt; right)&#123;<br>            <span class="hljs-keyword">if</span> (nums[left]*nums[left]&gt;nums[right]*nums[right])&#123;<br>                res[index--] = nums[left]*nums[left];<br>                left++;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                res[index--]=nums[right]*nums[right];<br>                right--;<br>            &#125;<br>        &#125;<br>        res[<span class="hljs-number">0</span>] = nums[left]*nums[left];<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-长度最小的子数组-Lc209"><a href="#1-5-长度最小的子数组-Lc209" class="headerlink" title="1.5 长度最小的子数组(Lc209)"></a>1.5 长度最小的子数组(Lc209)</h3><p> 给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。</p><p>示例：</p><p>​输入：s &#x3D; 7, nums &#x3D; [2,3,1,2,4,3] 输出：2 解释：子数组 [4,3] 是该条件下的长度最小的子数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//暴力法求解 注意边界值</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minSubArrayLen</span><span class="hljs-params">(<span class="hljs-type">int</span> target, <span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=nums.length-<span class="hljs-number">1</span>;i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">chain</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">newRes</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i;j&lt;=nums.length-<span class="hljs-number">1</span>;j++)&#123;<br>                <span class="hljs-keyword">if</span> (chain+nums[j]&lt;target)&#123;<br>                    <span class="hljs-keyword">if</span> (j== nums.length-<span class="hljs-number">1</span>)&#123;<br>                        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)&#123;<br>                            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                        &#125;<br>                        newRes = nums.length;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    chain = chain+nums[j];<br>                    newRes++;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    newRes++;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(newRes&lt;=res)&#123;<br>                res = newRes;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><span class="hljs-comment">//快慢指针的解法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minSubArrayLen</span><span class="hljs-params">(<span class="hljs-type">int</span> target, <span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">chain</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span>Integer.MAX_VALUE;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> right=<span class="hljs-number">0</span>;right&lt;=nums.length-<span class="hljs-number">1</span>;right++)&#123;<br>            chain = chain+nums[right];<br>            <span class="hljs-keyword">while</span> (chain&gt;=target)&#123;<br>                res = Math.min(res, right-left+<span class="hljs-number">1</span>);<br>                chain = chain-nums[left++];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res==Integer.MAX_VALUE?<span class="hljs-number">0</span>:res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6-螺旋矩阵-Lc54"><a href="#1-6-螺旋矩阵-Lc54" class="headerlink" title="1.6 螺旋矩阵(Lc54)"></a>1.6 螺旋矩阵(Lc54)</h3><p>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素。</p><p>本题最大的思想就是模拟元素搜索的过程，顺时针旋转就是四个方向一次轮流的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">spiralOrder</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix)</span> &#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">int</span>[][] isUsed = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[matrix.length][matrix[<span class="hljs-number">0</span>].length];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> matrix.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> matrix[<span class="hljs-number">0</span>].length-<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * direction表示下一步的状态</span><br><span class="hljs-comment">         * 0表示向右 1表示向下 2表示向右 3表示向上</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">direction</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nums</span> <span class="hljs-operator">=</span> matrix.length*matrix[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (index&lt;nums)&#123;<br>            <span class="hljs-keyword">if</span>(direction == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">if</span> (i&lt;=r&amp;&amp;i&gt;=<span class="hljs-number">0</span>&amp;&amp;j+<span class="hljs-number">1</span>&gt;=<span class="hljs-number">0</span>&amp;&amp;j+<span class="hljs-number">1</span>&lt;=c)&#123;<br>                    <span class="hljs-keyword">if</span> (isUsed[i][j+<span class="hljs-number">1</span>]==<span class="hljs-number">0</span>)&#123;<br>                        j = j+<span class="hljs-number">1</span>;<br>                        res.add(matrix[i][j]);<br>                        isUsed[i][j] = <span class="hljs-number">1</span>;<br>                        index++;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                &#125;<br>                direction = (direction+<span class="hljs-number">1</span>)%<span class="hljs-number">4</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(direction == <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">if</span> (i+<span class="hljs-number">1</span>&lt;=r&amp;&amp;i+<span class="hljs-number">1</span>&gt;=<span class="hljs-number">0</span>&amp;&amp;j&gt;=<span class="hljs-number">0</span>&amp;&amp;j&lt;=c)&#123;<br>                    <span class="hljs-keyword">if</span> (isUsed[i+<span class="hljs-number">1</span>][j]==<span class="hljs-number">0</span>)&#123;<br>                        i = i+<span class="hljs-number">1</span>;<br>                        res.add(matrix[i][j]);<br>                        isUsed[i][j]=<span class="hljs-number">1</span>;<br>                        index++;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                &#125;<br>                direction = (direction+<span class="hljs-number">1</span>)%<span class="hljs-number">4</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(direction == <span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-keyword">if</span> (i-<span class="hljs-number">1</span>&lt;=r&amp;&amp;i-<span class="hljs-number">1</span>&gt;=<span class="hljs-number">0</span>&amp;&amp;j&gt;=<span class="hljs-number">0</span>&amp;&amp;j&lt;=c)&#123;<br>                    <span class="hljs-keyword">if</span> (isUsed[i-<span class="hljs-number">1</span>][j]==<span class="hljs-number">0</span>)&#123;<br>                        i = i-<span class="hljs-number">1</span>;<br>                        res.add(matrix[i][j]);<br>                        isUsed[i][j]=<span class="hljs-number">1</span>;<br>                        index++;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                &#125;<br>                direction = (direction+<span class="hljs-number">1</span>)%<span class="hljs-number">4</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(direction == <span class="hljs-number">3</span>)&#123;<br>                <span class="hljs-keyword">if</span> (i&lt;=r&amp;&amp;i&gt;=<span class="hljs-number">0</span>&amp;&amp;j-<span class="hljs-number">1</span>&gt;=<span class="hljs-number">0</span>&amp;&amp;j-<span class="hljs-number">1</span>&lt;=c)&#123;<br>                    <span class="hljs-keyword">if</span> (isUsed[i][j-<span class="hljs-number">1</span>]==<span class="hljs-number">0</span>)&#123;<br>                        j = j-<span class="hljs-number">1</span>;<br>                        res.add(matrix[i][j]);<br>                        isUsed[i][j]=<span class="hljs-number">1</span>;<br>                        index++;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                &#125;<br>                direction = (direction+<span class="hljs-number">1</span>)%<span class="hljs-number">4</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java网络编程</title>
    <link href="/2020/07/17/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2020/07/17/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>谈谈我对于函数式编程了理解</title>
    <link href="/2020/07/14/%E8%B0%88%E8%B0%88%E6%88%91%E5%AF%B9%E4%BA%8E%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%BA%86%E7%90%86%E8%A7%A3/"/>
    <url>/2020/07/14/%E8%B0%88%E8%B0%88%E6%88%91%E5%AF%B9%E4%BA%8E%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%BA%86%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tk-mybatis使用总结</title>
    <link href="/2020/07/02/tk-mybatis%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <url>/2020/07/02/tk-mybatis%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是tk-mybatis"><a href="#什么是tk-mybatis" class="headerlink" title="什么是tk.mybatis"></a>什么是tk.mybatis</h2><h3 id="tk-mybatis顾名思义就是mybatis的进一步封装。tk-mybatis可以使得ORM框架更加简便，不再需要手写SQL语句。从而进一步提高CRUD的速率。"><a href="#tk-mybatis顾名思义就是mybatis的进一步封装。tk-mybatis可以使得ORM框架更加简便，不再需要手写SQL语句。从而进一步提高CRUD的速率。" class="headerlink" title="tk.mybatis顾名思义就是mybatis的进一步封装。tk.mybatis可以使得ORM框架更加简便，不再需要手写SQL语句。从而进一步提高CRUD的速率。"></a>tk.mybatis顾名思义就是mybatis的进一步封装。tk.mybatis可以使得ORM框架更加简便，不再需要手写SQL语句。从而进一步提高CRUD的速率。</h3><h2 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h2><h3 id="1、使用Mave构建项目，POM文件中导入依赖坐标"><a href="#1、使用Mave构建项目，POM文件中导入依赖坐标" class="headerlink" title="1、使用Mave构建项目，POM文件中导入依赖坐标"></a>1、使用Mave构建项目，POM文件中导入依赖坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--通用mapper起步依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tk.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、编写POJO类"><a href="#2、编写POJO类" class="headerlink" title="2、编写POJO类"></a>2、编写POJO类</h3><ul><li><p>由于ORM框架会将数据表和类之间建立起对应的映射关系，所以编写一个合格的POJO类对项目意义很大。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModel(description = &quot;Brand&quot;,value = &quot;Brand&quot;)</span><br><span class="hljs-meta">@Table(name=&quot;tb_brand&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Brand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;品牌id&quot;,required = false)</span><br><span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>    <span class="hljs-meta">@Column(name = &quot;id&quot;)</span><br><span class="hljs-keyword">private</span> Integer id;<span class="hljs-comment">//品牌id</span><br><span class="hljs-meta">@ApiModelProperty(value = &quot;品牌名称&quot;,required = false)</span><br>    <span class="hljs-meta">@Column(name = &quot;name&quot;)</span><br><span class="hljs-keyword">private</span> String name;<span class="hljs-comment">//品牌名称</span><br><span class="hljs-meta">@ApiModelProperty(value = &quot;品牌图片地址&quot;,required = false)</span><br>    <span class="hljs-meta">@Column(name = &quot;image&quot;)</span><br><span class="hljs-keyword">private</span> String image;<span class="hljs-comment">//品牌图片地址</span><br><span class="hljs-meta">@ApiModelProperty(value = &quot;品牌的首字母&quot;,required = false)</span><br>    <span class="hljs-meta">@Column(name = &quot;letter&quot;)</span><br><span class="hljs-keyword">private</span> String letter;<span class="hljs-comment">//品牌的首字母</span><br><span class="hljs-meta">@ApiModelProperty(value = &quot;排序&quot;,required = false)</span><br>    <span class="hljs-meta">@Column(name = &quot;seq&quot;)</span><br><span class="hljs-keyword">private</span> Integer seq;<span class="hljs-comment">//排序</span><br><span class="hljs-comment">//get方法</span><br>  ......<br><span class="hljs-comment">//set方法</span><br>  ......<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3、编写Dao"><a href="#3、编写Dao" class="headerlink" title="3、编写Dao"></a>3、编写Dao</h3><ul><li>Dao的编写相当简单，不需要额外的sql语句的注解，也不需要xml配置文件，只需要将Mapper继承Mapper类，并且指定POJO的泛型即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*****</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: com.changgou.goods.dao</span><br><span class="hljs-comment"> * Dao层:</span><br><span class="hljs-comment"> *  使用通用Mapper-&gt;MyBatis动态SQL</span><br><span class="hljs-comment"> *  0SQL语句,面向对象操作</span><br><span class="hljs-comment"> *  要求：Dao必须集成Mapper&lt;T&gt;接口</span><br><span class="hljs-comment"> *        Mapper接口中有增删改查各种操作</span><br><span class="hljs-comment"> ****/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BrandMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mapper</span>&lt;Brand&gt; &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意，是继承Mapper类而不是接口，Mapper的权限定类名是<code>import tk.mybatis.mapper.common.Mapper;</code></li></ul><h3 id="4、service层实现"><a href="#4、service层实现" class="headerlink" title="4、service层实现"></a>4、service层实现</h3><ul><li><p>编写service类，注入Mapper依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BrandServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BrandService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BrandMapper brandMapper;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>基本的CRUD操作（由于继承了Mapper类，所以自动获得了父类中的方法）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment">    * 查询所有</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> List&lt;Brand&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-comment">//使用通用Mapper查询所有</span><br>       <span class="hljs-keyword">return</span> brandMapper.selectAll();<br>   &#125;<br>  <br>   <span class="hljs-comment">/***</span><br><span class="hljs-comment">    * 根据Id查询</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> Brand <span class="hljs-title function_">findById</span><span class="hljs-params">(Integer id)</span> &#123;<br>       <span class="hljs-comment">//通用Mapper：selectByPrimaryKey:根据ID查询</span><br>       <span class="hljs-keyword">return</span> brandMapper.selectByPrimaryKey(id);<br>   &#125;<br>  <br>   <span class="hljs-comment">/****</span><br><span class="hljs-comment">    * 添加品牌</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> brand</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Brand brand)</span> &#123;<br>       <span class="hljs-comment">/***</span><br><span class="hljs-comment">        * insertSelective：增加操作,忽略空值</span><br><span class="hljs-comment">        * 只要方法中带有Selective都会忽略空值</span><br><span class="hljs-comment">        * INSERT INTO tb_brand(name,letter) VALUES(?,?)</span><br><span class="hljs-comment">        *</span><br><span class="hljs-comment">        * brandMapper.insert(brand);</span><br><span class="hljs-comment">        * INSERT INTO tb_brand(id,name,image,letter,seq) VALUES(?,?,?,?,?)</span><br><span class="hljs-comment">        */</span><br>  <br>       <span class="hljs-comment">//方法中带有selective会忽略空值</span><br>       brandMapper.insertSelective(brand);<br>   &#125;<br>  <br>   <span class="hljs-comment">/***</span><br><span class="hljs-comment">    * 删除</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> &#123;<br>       brandMapper.deleteByPrimaryKey(id);<br>   &#125;<br>  <br>   <span class="hljs-comment">/***</span><br><span class="hljs-comment">    * 修改品牌</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> brand</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Brand brand)</span> &#123;<br>       <span class="hljs-comment">//通用Mapper修改数据，忽略空值</span><br>       brandMapper.updateByPrimaryKeySelective(brand);<br>   &#125;<br>  <br></code></pre></td></tr></table></figure></li></ul><h2 id="利用tk-mybatis进行条件化查询"><a href="#利用tk-mybatis进行条件化查询" class="headerlink" title="利用tk.mybatis进行条件化查询"></a>利用tk.mybatis进行条件化查询</h2><h3 id="1、条件化查询的的关键是tk-mybatis中的Exampl的构建"><a href="#1、条件化查询的的关键是tk-mybatis中的Exampl的构建" class="headerlink" title="1、条件化查询的的关键是tk.mybatis中的Exampl的构建"></a>1、条件化查询的的关键是<code>tk.mybatis</code>中的<code>Exampl</code>的构建</h3><h3 id="2、构建完Example类后就可以通过Mapper中自带的selectByExample方法进行搜索"><a href="#2、构建完Example类后就可以通过Mapper中自带的selectByExample方法进行搜索" class="headerlink" title="2、构建完Example类后就可以通过Mapper中自带的selectByExample方法进行搜索"></a>2、构建完<code>Example</code>类后就可以通过<code>Mapper</code>中自带的<code>selectByExample</code>方法进行搜索</h3><ul><li><p>示例代码 创建一个<code>Example</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Example <span class="hljs-title function_">createExample</span><span class="hljs-params">(Brand brand)</span> &#123;<br>    <span class="hljs-comment">//动态构建条件Example,criteria:动态组装条件</span><br>    <span class="hljs-type">Example</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>(Brand.class);<br>    Example.<span class="hljs-type">Criteria</span> <span class="hljs-variable">criteria</span> <span class="hljs-operator">=</span> example.createCriteria();<br>  <br>    <span class="hljs-comment">//组装条件</span><br>    <span class="hljs-keyword">if</span>(brand!=<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">//id</span><br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(brand.getId()))&#123;<br>            criteria.andEqualTo(<span class="hljs-string">&quot;id&quot;</span>,brand.getId());<br>        &#125;<br>  <br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(brand.getName()))&#123;<br>            <span class="hljs-comment">//1)输入name-根据name查询[模糊查询]   select * from tb_brand wehere name like &#x27;%brand.getName%&#x27;</span><br>            criteria.andLike(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;%&quot;</span>+brand.getName()+<span class="hljs-string">&quot;%&quot;</span>);<br>        &#125;<br>  <br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(brand.getLetter()))&#123;<br>            <span class="hljs-comment">//2)输入了letter-根据letter查询       select * from tb_brand where letter= &#x27;brand.getLetter&#x27;</span><br>            criteria.andEqualTo(<span class="hljs-string">&quot;letter&quot;</span>,brand.getLetter());<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> example;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过<code>Example</code>查询数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Brand&gt; <span class="hljs-title function_">findList</span><span class="hljs-params">(Brand brand)</span> &#123;<br>    <span class="hljs-comment">//条件组装抽取</span><br>    <span class="hljs-type">Example</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> createExample(brand);<br>    <span class="hljs-keyword">return</span> brandMapper.selectByExample(example);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>“mybatis”</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PageHelp分页插件使用初体验</title>
    <link href="/2020/07/01/PageHelp%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <url>/2020/07/01/PageHelp%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li><p>SpringBoot2.X</p></li><li><p>关键依赖（Maven）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ul><li><p>Dao层（使用tk-mybatis）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*****</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: www.porridgez.top</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: top.porridgez.goods.dao</span><br><span class="hljs-comment"> * Dao层:</span><br><span class="hljs-comment"> *  使用通用Mapper-&gt;MyBatis动态SQL</span><br><span class="hljs-comment"> *  0SQL语句,面向对象操作</span><br><span class="hljs-comment"> *  要求：Dao必须集成Mapper&lt;T&gt;接口</span><br><span class="hljs-comment"> *        Mapper接口中有增删改查各种操作</span><br><span class="hljs-comment"> ****/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BrandMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mapper</span>&lt;Brand&gt; &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>service层</p><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/****</span><br><span class="hljs-comment">     * 分页+条件搜索</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageNum</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> size</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> brand</span><br><span class="hljs-comment">     */</span><br>    PageInfo&lt;Brand&gt; <span class="hljs-title function_">findPage</span><span class="hljs-params">(Brand brand, Integer pageNum, Integer size)</span>;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageNum : 当前页</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> size : 每页显示条数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> PageInfo&lt;T&gt;</span><br><span class="hljs-comment">     */</span><br>    PageInfo&lt;Brand&gt; <span class="hljs-title function_">findPage</span><span class="hljs-params">(Integer pageNum,Integer size)</span>;<br></code></pre></td></tr></table></figure><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 分页+条件搜索</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> brand</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageNum</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> size</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PageInfo&lt;Brand&gt; <span class="hljs-title function_">findPage</span><span class="hljs-params">(Brand brand, Integer pageNum, Integer size)</span> &#123;<br>        <span class="hljs-comment">//静态分页 PageHelper.startPage(pageNum,size)</span><br>        PageHelper.startPage(pageNum,size);<br>        <span class="hljs-comment">//条件搜索</span><br>        <span class="hljs-comment">//example是自己配置的条件对象</span><br>        <span class="hljs-type">Example</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> createExample(brand);<br>        <span class="hljs-comment">//搜索</span><br>        List&lt;Brand&gt; brands = brandMapper.selectByExample(example);<br>        <span class="hljs-comment">//封装PageInfo&lt;T&gt;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageInfo</span>&lt;Brand&gt;(brands);<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>PageHelp分页插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java内部类</title>
    <link href="/2020/05/12/Java%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <url>/2020/05/12/Java%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>一个定义在另一个类中的类，叫作内部类。</p><p>内部类是一种非常有用的特性，因为它允许你把一些逻辑相关的类组织在一起，并控制位于内部的类的可见性。然而必须要了解，内部类与组合是完全不同的概念，这一点很重要。在最初，内部类看起来就像是一种代码隐藏机制：将类置于其他类的内部。但是，你将会了解到，内部类远不止如此，它了解外围类，并能与之通信，而且你用内部类写出的代码更加优雅而清晰，尽管并不总是这样（而且 Java 8 的 Lambda 表达式和方法引用减少了编写内部类的需求）。</p><h2 id="创建过程"><a href="#创建过程" class="headerlink" title="创建过程"></a>创建过程</h2><p>代码实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Parcel1</span> &#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Contents</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">value</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> i; &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Destination</span> &#123;<br>        <span class="hljs-keyword">private</span> String label;<br>        Destination(String whereTo) &#123;<br>            label = whereTo;<br>        &#125;<br>        String <span class="hljs-title function_">readLabel</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> label; &#125;<br>    &#125;<br>    <span class="hljs-comment">// Using inner classes looks just like</span><br>    <span class="hljs-comment">// using any other class, within Parcel1:</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ship</span><span class="hljs-params">(String dest)</span> &#123;<br>        <span class="hljs-type">Contents</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Contents</span>();<br>        <span class="hljs-type">Destination</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Destination</span>(dest);<br>        System.out.println(d.readLabel());<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Parcel1</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parcel1</span>();<br>        p.ship(<span class="hljs-string">&quot;Tasmania&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出结果是Tasmania</span><br></code></pre></td></tr></table></figure><ul><li>当我们在 <code>ship()</code> 方法里面使用内部类的时候，与使用普通类没什么不同。在这里，明显的区别只是内部类的名字是嵌套在 <strong>Parcel1</strong> 里面的。</li><li>如果想从外部类的非静态方法之外的任意位置创建某个内部类的对象，那么必须像在 <code>main()</code> 方法中那样，具体地指明这个对象的类型：<em>OuterClassName.InnerClassName</em>。(译者注：在外部类的静态方法中也可以直接指明类型 <em>InnerClassName</em>，在其他类中需要指明 <em>OuterClassName.InnerClassName</em>。)</li></ul><p>所以内部类自动拥有对其外围类所有成员的访问权。这是如何做到的呢？当某个外围类的对象创建了一个内部类对象时，此内部类对象必定会秘密地捕获一个指向那个外围类对象的引用。然后，在你访问此外围类的成员时，就是用那个引用来选择外围类的成员。幸运的是，编译器会帮你处理所有的细节，但你现在可以看到：内部类的对象只能在与其外围类的对象相关联的情况下才能被创建（就像你应该看到的，内部类是非 <strong>static</strong> 类时）。构建内部类对象时，需要一个指向其外围类对象的引用，如果编译器访问不到这个引用就会报错。不过绝大多数时候这都无需程序员操心。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>当某个外围类的对象创建内部类对象的时候，此内部类必定会捕获一个指向外部对象的引用。然后用这个捕获的引用来访问外围类的成员。捕获外围类的引用是由编译器开操作的。<u>内部类的对象只能在其与外围对象相关联的情况下才能被创建。构建内部对象时候，需要一个指向外围类对象的引用，如果编译器访问不到这个外围对象的引用就会报错。</u></p><p>可以使用.new关键字创建内部类对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">OutClass outClass=<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutClass</span>();<br>InnerClass innerClass=outClass.<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot实现图片上传功能</title>
    <link href="/2020/04/27/SpringBoot%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD/"/>
    <url>/2020/04/27/SpringBoot%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h3 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h3><ul><li>SpringBoot2.X</li><li>mysql+mybatis</li></ul><h3 id="功能实现代码"><a href="#功能实现代码" class="headerlink" title="功能实现代码"></a>功能实现代码</h3><ul><li><p>图片上传的service代码</p><ul><li><p>通过接受前端传输的<code>MultipartFile</code>类型的图片,通过调用<code>transferTo()</code>方法将文件写入主机的文件目录中。</p></li><li><p><code>UUID</code>用来生成一个商品的ID用于存入数据库，并将商品描述图片的文件路径存入数据库。</p></li><li><p><code>MultipartFile</code>类中的<code>getOriginalFilename</code>方法用来获取文件名。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadService</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    GoodsImageMapper goodsImageMapper;<br>    <span class="hljs-meta">@Resource</span><br>    GoodInfoMapper goodInfoMapper;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">upLoadImageService</span><span class="hljs-params">(MultipartFile image,String goodsName, Double goodsPrice, String goodsDescribe, HttpSession session)</span>&#123;<br>        Integer goodsId= UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).hashCode();<br>        <span class="hljs-keyword">if</span>(image.isEmpty())&#123;<br>            System.out.println(<span class="hljs-string">&quot;文件为空&quot;</span>);<br>        &#125;<br>        String fileName=image.getOriginalFilename();<br>        String suffixName=fileName.substring(fileName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>        fileName= goodsId+suffixName;<br>        File dest=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/jim.chou/Desktop/Java/&quot;</span>+fileName);<br>        <span class="hljs-keyword">if</span> (!dest.getParentFile().exists())&#123;<br>            dest.getParentFile().mkdir();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            image.transferTo(dest);<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            goodInfoMapper.publishGoods(goodsId,goodsName,goodsDescribe,goodsPrice, (String) session.getAttribute(<span class="hljs-string">&quot;username&quot;</span>));<br>            goodsImageMapper.UploadImage(goodsId,<span class="hljs-string">&quot;/image/&quot;</span>+fileName);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>建立文件的映射关系</p><ul><li><p>为了主机文件文件目录和SpringBoot项目下的文件目录建立对应关系，需要在<code>WebMvcConfigurer</code>的实现类中做如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMVCConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;      registry.addResourceHandler(<span class="hljs-string">&quot;/image/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;file:/Users/jim.chou/Desktop/Java/&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>这样就能将项目项目结构下的<code>/image/**</code>目录与机的<code>/Users/jim.chou/Desktop/Java/</code>目录建立对应关系</p></li></ul></li><li><p>前端代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>上传图片<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;image&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>图片:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;$&#123;filename &#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>前端通过post方式传递图片参数image。</li></ul></li><li><p>最后在application.yml文件中配置上传大小的限制</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">servlet:</span><br>  <span class="hljs-attr">multipart:</span><br>    <span class="hljs-attr">max-file-size:</span> <span class="hljs-string">100MB</span><br>    <span class="hljs-attr">max-request-size:</span> <span class="hljs-string">100MB</span><br></code></pre></td></tr></table></figure></li><li><p>Controller层代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">GoodUpload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;image&quot;)</span>MultipartFile image,</span><br><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(&quot;goodsName&quot;)</span> String goodsName,</span><br><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(&quot;goodsPrice&quot;)</span> Double goodsPrice,</span><br><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(&quot;goodsDes&quot;)</span>String goodsDescribe,</span><br><span class="hljs-params">                          HttpSession session</span><br><span class="hljs-params">   )</span><br>   &#123;<br>     uploadService.upLoadImageService(image,goodsName,goodsPrice,goodsDescribe,session);<br>   &#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>图片上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android开发时Fragmen页面不能使用findViewById()获取控件</title>
    <link href="/2020/04/11/Android%E5%BC%80%E5%8F%91%E6%97%B6Fragmen%E9%A1%B5%E9%9D%A2%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8findViewById-%E8%8E%B7%E5%8F%96%E6%8E%A7%E4%BB%B6/"/>
    <url>/2020/04/11/Android%E5%BC%80%E5%8F%91%E6%97%B6Fragmen%E9%A1%B5%E9%9D%A2%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8findViewById-%E8%8E%B7%E5%8F%96%E6%8E%A7%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>最近有在学习Android引用开发</li><li>平台是：Android stdio</li><li>SDK：Android 10、API 29</li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>废话开始了！！！！</li><li>为了实现底部导航菜单栏的功能，增加了Fragment。在定义好的Fragment页面中有<code>button</code>控件定义在xml文档中，在定义页面类文件为其实现功能时，发现不能使用findViewById()方法来获取控件。</li></ul><p><img src="https://img-blog.csdnimg.cn/2019101118491889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NvbXB1dGVyX09wZXJhdGVy,size_16,color_FFFFFF,t_70"></p><ul><li>原来Fragment页面默认继承的是Fragment类，并没有实例化页面为Activity。而findViewById()方法是Activity实例独有的获取控件的方法。</li></ul><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>通过<code>getActivity()</code>方法。以下是<code>getActivity()</code>的函数定义：可知<code>getActivity()</code>方法返回的是一个<code>FragmentActivity</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Return the &#123;<span class="hljs-doctag">@link</span> FragmentActivity&#125; this fragment is currently associated with.</span><br><span class="hljs-comment">     * May return &#123;<span class="hljs-doctag">@code</span> null&#125; if the fragment is associated with a &#123;<span class="hljs-doctag">@link</span> Context&#125;</span><br><span class="hljs-comment">     * instead.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> #requireActivity()</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> FragmentActivity <span class="hljs-title function_">getActivity</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> mHost == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : (FragmentActivity) mHost.getActivity();<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li><p>于是我试过使用<code>getActivity()</code>方法来<br><img src="https://img-blog.csdnimg.cn/20191011190404393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NvbXB1dGVyX09wZXJhdGVy,size_16,color_FFFFFF,t_70"></p></li><li><p>结果报错来了：</p></li></ul><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">E/AndroidRuntime: FATAL EXCEPTION: main<br>    Process: com.example.myschool10, PID: <span class="hljs-number">14418</span><br>    java.lang.NullPointerException: Attempt <span class="hljs-keyword">to</span> invoke <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">method</span> &#x27;<span class="hljs-title function_">void</span> <span class="hljs-title function_">android</span>.<span class="hljs-title function_">widget</span>.<span class="hljs-title function_">Button</span>.<span class="hljs-title function_">setOnClickListener</span><span class="hljs-params">(android.view.View$OnClickListener)</span>&#x27; <span class="hljs-title function_">on</span> <span class="hljs-title function_">a</span> <span class="hljs-title function_">null</span> <span class="hljs-title function_">object</span> <span class="hljs-title function_">reference</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191011190610865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NvbXB1dGVyX09wZXJhdGVy,size_16,color_FFFFFF,t_70"></p><ul><li><p>原来是在<code>onCreateView()</code>方法中不能使用setOnClickListener()的事件监听必须换在<code>onActivityCreated()</code>方法中使用</p></li><li><p>完整版代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PushFragment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fragment</span> &#123;<br>    <span class="hljs-keyword">private</span> Button addphoto;<br><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> View <span class="hljs-title function_">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, <span class="hljs-meta">@Nullable</span> ViewGroup container, <span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-type">View</span> <span class="hljs-variable">view</span> <span class="hljs-operator">=</span> inflater.inflate(R.layout.push_fragment,container,<span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">return</span> view;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onActivityCreated</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onActivityCreated(savedInstanceState);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">button</span> <span class="hljs-operator">=</span>getActivity().findViewById(R.id.click_to_push);<br>        button.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;success&quot;</span>);<br>            &#125;<br>        &#125;);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>脱裤？不！是拖库！！！</title>
    <link href="/2020/03/21/%E8%84%B1%E8%A3%A4%EF%BC%9F%E4%B8%8D%EF%BC%81%E6%98%AF%E6%8B%96%E5%BA%93%EF%BC%81%EF%BC%81%EF%BC%81/"/>
    <url>/2020/03/21/%E8%84%B1%E8%A3%A4%EF%BC%9F%E4%B8%8D%EF%BC%81%E6%98%AF%E6%8B%96%E5%BA%93%EF%BC%81%EF%BC%81%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h4 id="悲惨的教训——“拖库”"><a href="#悲惨的教训——“拖库”" class="headerlink" title="悲惨的教训——“拖库”"></a>悲惨的教训——“拖库”</h4><ul><li>当下在程序员之间最流行的语录是什么？PHP天下第一？人生苦短及时Python？不！！是删库跑路。</li><li>不知道从什么时候开始，黑客入侵企业服务器数据库导致大量用户信息泄露的消息渐渐开始闯入我们的视野。一个个拖库的惨案不断上演，如果你觉得被拖库没什么大不了的话，那你可就是大错特错了。<br><img src="/imgs/springsecuity1.jpg" alt="springsecurity"></li></ul><h4 id="拖库就是灭亡吗？"><a href="#拖库就是灭亡吗？" class="headerlink" title="拖库就是灭亡吗？"></a>拖库就是灭亡吗？</h4><ul><li>答案是否定的，且不说现如今数据库连接所用到的种种加密技术，为了防备黑客在拖库后获取用户的密码，明文保存密码的时代已经成为了历史。</li><li>如今，如果你有合法权限正大光明地查看一个包含用户账号和你密码的数据库时候，你会发现密码栏中是密密麻麻的十六进制数（32位或者16位）。这就是大名鼎鼎的MD5加密算法。</li><li>关于MD5算法我也就不赘述了，我自己也说不清楚。从黑盒程序员的角度来说，就是一种报文摘要的算法，这种算法可以将任何输入，无论长短都转化成一个确定的32位的字符串。不同的输入（即使是一个字符的变化）会产生不同输出，因此这种算法多是用在完整性验证方面。</li><li>在这种算法的指导下，服务器会将用户的密码用MD5进行加密再存入数据库。在用户下一次登陆的时候，服务器会将用户输入的密码进行MD5计算，得到的结果和数据库中保存的数据进行对比，进而判断是否通过。所以自始至终，知道密码明文的只有用户自己。即使数据库被拖库，黑客依然无法获取明文密码。</li></ul><h4 id="道高一尺，魔高一丈"><a href="#道高一尺，魔高一丈" class="headerlink" title="道高一尺，魔高一丈"></a>道高一尺，魔高一丈</h4><ul><li>现在假设这样一种情况：黑客已经脱裤成功！！！有没有一种情况下他会知道你的密码呢？</li><li>答案是有可能的，为说么说是有可能呢？因为既然MD5加密算法已知，那么黑客完全可以用一些常用的密码在用MD5加密后的和数据库中的密码对比，万一就成了呢？这就是传说中的“碰撞”。</li><li>随着这一理念的不断壮大，人们将一个常用的密码，及其加密后的秘文做了一张表，被称为字典。</li><li>由于MD5只能表示36的16次方数量的值，在算力允许的情况下，就可以找到一个和原密码不一样，却有相同密文值。</li><li>如果你觉得穷举的这种暴力破解的方法很low那你可以了解一下彩虹表<br><img src="/imgs/springsecurity2.png" alt="springsecurity"><br>这是一种可以可以在无法获得更多内存空间的情况下，获得更多的表空间的方式。有理论得到加持，再加上硬件厂商的GPU计算（英伟达显卡的CUDA技术)每秒可以达到上亿此的计算次数。</li></ul><h4 id="换汤不换药的加盐"><a href="#换汤不换药的加盐" class="headerlink" title="换汤不换药的加盐"></a>换汤不换药的加盐</h4><ul><li>在这样的算力之下，为了提高密码破解的难度，人们想到了加盐——就是将密码加上一个特殊的值在进行哈希运算。</li><li>常见的加盐算法有将账号当成盐的<br><code>username=&quot;admin&quot;; password=&quot;abc123&quot;; persistentPwd=md5(user+password);</code></li><li>为了使盐随机，用UUID的<br><code>salt=UUID.randomUUID(); password=&quot;abc123&quot;; persistentPwd=md5(salt+password);</code><br>再将盐保存在数据库中，获得持久化</li><li>还有直接将盐写在密码上的<br><code>salt=UUID.randomUUID(); password=&quot;abc123&quot;; persistentPwd=salt+md5(salt+password);</code></li><li>可是，加盐算法也仅仅是阻隔了密码和明文的直接对应，普通的爆破穷举法依然有效。随着计算技术的升级，这些破解起来任然还是时间的问题。</li></ul><h4 id="柳暗花明又一村"><a href="#柳暗花明又一村" class="headerlink" title="柳暗花明又一村"></a>柳暗花明又一村</h4><ul><li>试想一下，为了暴破穷举法可以很快的完成呢？答案就是，普通的散列加密运算几乎没有什么时间成本，这无疑加速了破解的速度。所以有没有一种不同于普通的散列算法的算法，既能做到像散列一样不可逆，又能做到慢加密呢。</li><li>于是乎，BCrypt算法就是这样一个慢加密算法。<br>这是一段由BCrypt算生成的代码。<br><img src="/imgs/springsecurity3.png" alt="springsecurity"></li><li>通过调整结果参数，可以做到既不影响用户的体验，也能让穷举破解望尘莫及。</li></ul>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringSecurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot--Condition条件化配置</title>
    <link href="/2020/02/08/SpringBoot-Condition%E6%9D%A1%E4%BB%B6%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/02/08/SpringBoot-Condition%E6%9D%A1%E4%BB%B6%E5%8C%96%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="Conditionl-注解"><a href="#Conditionl-注解" class="headerlink" title="@Conditionl()注解"></a>@Conditionl()注解</h3><ul><li>spring4.0引入的新特性，当你注册bean时，可以对这个bean添加一定的自定义条件，当满足这个条件时，注册这个bean，否则不注册。</li><li>实现Condition接口，重写matches()方法，返回true则意味着注册被注解的bean，false则跳过被注解的bean。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Condition</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(ConditionContext var1, AnnotatedTypeMetadata var2)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>在注册bean时候，可以使用的@Conditionl()判断是否将此类加入到bean容器中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> readinglist;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Condition;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ConditionContext; <br><span class="hljs-keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcTemplateCondition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Condition</span> &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(ConditionContext context,</span><br><span class="hljs-params">                             AnnotatedTypeMetadata metadata)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          context.getClassLoader().loadClass(<br>                 <span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>);<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ConditionalOnClass"><a href="#ConditionalOnClass" class="headerlink" title="@ConditionalOnClass()"></a>@ConditionalOnClass()</h3><ul><li>当你用Java来声明Bean的时候，可以使用这个自定义条件类:</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Conditional</span>(<span class="hljs-title class_">JdbcTemplateCondition</span>.<span class="hljs-property">class</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-title class_">MyService</span> <span class="hljs-title function_">myService</span>(<span class="hljs-params">Class <span class="hljs-keyword">class</span></span>) &#123;<br>    ... <br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@ConditionalOnClass()</code>：当类路径下存在某个类时才会执行。<br>以<code>RedisAutoConfiguration</code>类为例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConditionalOnClass(&#123;RedisOperations.class&#125;)</span><br><span class="hljs-meta">@EnableConfigurationProperties(&#123;RedisProperties.class&#125;)</span><br><span class="hljs-meta">@Import(&#123;LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisAutoConfiguration</span> &#123;<br>        ......<br>    &#125;       <br></code></pre></td></tr></table></figure><h3 id="ConditionalOnClass-1"><a href="#ConditionalOnClass-1" class="headerlink" title="@ConditionalOnClass()"></a>@ConditionalOnClass()</h3><p><code>@ConditionalOnClass(&#123;RedisOperations.class&#125;)</code>其用途是判断当前classpath下是否存在指定类，若是则将当前的配置装载入spring容器。此处用于判断是否引入了redis的starters。若是类路径下有<code>RedisOperations</code>类则将以下的配置载入到IOC容器中。</p><ul><li><code>@ConditionakOnMissBean</code>表示IOC容器中不存在某个Bean时才会执行。还是以redis的starter为例。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean(</span><br><span class="hljs-meta">        name = &#123;&quot;redisTemplate&quot;&#125;</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="hljs-keyword">throws</span> UnknownHostException &#123;<br>        RedisTemplate&lt;Object, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>();<br>        template.setConnectionFactory(redisConnectionFactory);<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot注解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker搭建wordpress+Nginx代理域名</title>
    <link href="/2020/02/01/Docker%E6%90%AD%E5%BB%BAwordpress-Nginx%E4%BB%A3%E7%90%86%E5%9F%9F%E5%90%8D/"/>
    <url>/2020/02/01/Docker%E6%90%AD%E5%BB%BAwordpress-Nginx%E4%BB%A3%E7%90%86%E5%9F%9F%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>docker</li><li>docker-compose</li><li>centos7</li><li>nginx1.9.9</li></ul><h2 id="1、docker安装"><a href="#1、docker安装" class="headerlink" title="1、docker安装"></a>1、docker安装</h2><h4 id="docker可以选择docker-ce或者docker版本、docker只是为了部署wordpress所以直接安装的docker"><a href="#docker可以选择docker-ce或者docker版本、docker只是为了部署wordpress所以直接安装的docker" class="headerlink" title="docker可以选择docker-ce或者docker版本、docker只是为了部署wordpress所以直接安装的docker"></a>docker可以选择docker-ce或者docker版本、docker只是为了部署wordpress所以直接安装的docker</h4><ul><li>安装docker<br><code>yum install docker</code></li><li>启动docker<br><code>systemctl start docker</code></li><li>设置开机自动启动<br><code>systemctl enable docker</code></li></ul><h2 id="2、安装docker-compose"><a href="#2、安装docker-compose" class="headerlink" title="2、安装docker-compose"></a>2、安装docker-compose</h2><h4 id="Docker-Compose是-docker-提供的一个命令行工具，用来定义和运行由多个容器组成的应用。使用-compose，我们可以通过-YAML-文件声明式的定义应用程序的各个服务，并由单个命令完成应用的创建和启动。"><a href="#Docker-Compose是-docker-提供的一个命令行工具，用来定义和运行由多个容器组成的应用。使用-compose，我们可以通过-YAML-文件声明式的定义应用程序的各个服务，并由单个命令完成应用的创建和启动。" class="headerlink" title="Docker Compose是 docker 提供的一个命令行工具，用来定义和运行由多个容器组成的应用。使用 compose，我们可以通过 YAML 文件声明式的定义应用程序的各个服务，并由单个命令完成应用的创建和启动。"></a>Docker Compose是 docker 提供的一个命令行工具，用来定义和运行由多个容器组成的应用。使用 compose，我们可以通过 YAML 文件声明式的定义应用程序的各个服务，并由单个命令完成应用的创建和启动。</h4><ul><li><p>安装docker-compose<br><code>yum install -y docker-compose</code></p></li><li><p>需要使用到的docker-compose.yml文件下载 密码:9wg7<br><a href="http://链接:https://pan.baidu.com/s/1lJB49u9puv7m3wCUg5uexw" title="百度网盘自取">百度网盘自取</a></p></li></ul><h2 id="3、运行wordpress"><a href="#3、运行wordpress" class="headerlink" title="3、运行wordpress"></a>3、运行wordpress</h2><h4 id="在wordpress运行的服务器主机上自动构建wordpress及mysql的容器"><a href="#在wordpress运行的服务器主机上自动构建wordpress及mysql的容器" class="headerlink" title="在wordpress运行的服务器主机上自动构建wordpress及mysql的容器"></a>在wordpress运行的服务器主机上自动构建wordpress及mysql的容器</h4><h4 id="在更目录下创建博客项目的文件夹（文件夹名字将成为博客的项目名字）"><a href="#在更目录下创建博客项目的文件夹（文件夹名字将成为博客的项目名字）" class="headerlink" title="在更目录下创建博客项目的文件夹（文件夹名字将成为博客的项目名字）"></a>在更目录下创建博客项目的文件夹（文件夹名字将成为博客的项目名字）</h4><ul><li>在根目录下创建文件夹<br><code>mkdir /myblog</code></li><li>将下载的docker-compose.yml文件放入到&#x2F;myblog文件夹中，并进入文件夹<br><code>cd /myblog</code></li><li>自动构建wordpress<br><code>docker-comose up -d</code></li></ul><h2 id="4、开放端口"><a href="#4、开放端口" class="headerlink" title="4、开放端口"></a>4、开放端口</h2><h4 id="wordpress对外的端口号是8000由于服务器的防火墙限制，可能80（域名默认的端口号）和8000被限制访问"><a href="#wordpress对外的端口号是8000由于服务器的防火墙限制，可能80（域名默认的端口号）和8000被限制访问" class="headerlink" title="wordpress对外的端口号是8000由于服务器的防火墙限制，可能80（域名默认的端口号）和8000被限制访问"></a>wordpress对外的端口号是8000由于服务器的防火墙限制，可能80（域名默认的端口号）和8000被限制访问</h4><ul><li>开启8000、80端口<br><code>firewall-cmd --permanent --add-port=80/tcp</code><br><code>firewall-cmd --permanent --add-port=8000/tcp</code></li><li>重新加载防火墙配置<br><code>firewall-cmd --reload</code></li></ul><h4 id="嫌上面操作麻烦的可以直接关闭防火墙"><a href="#嫌上面操作麻烦的可以直接关闭防火墙" class="headerlink" title="嫌上面操作麻烦的可以直接关闭防火墙"></a>嫌上面操作麻烦的可以直接关闭防火墙</h4><p><code>systemctl stop firewalld</code></p><h4 id="不出意外的话，现在就可以通过www-xxxx-com-8000访问进入安装界面"><a href="#不出意外的话，现在就可以通过www-xxxx-com-8000访问进入安装界面" class="headerlink" title="不出意外的话，现在就可以通过www.xxxx.com:8000访问进入安装界面"></a>不出意外的话，现在就可以通过<code>www.xxxx.com:8000</code>访问进入安装界面</h4><p><code>www.xxxx.com</code>换成自己绑定了主机ip的域名</p><h2 id="5、利用Nginx反向代理自己的博客域名"><a href="#5、利用Nginx反向代理自己的博客域名" class="headerlink" title="5、利用Nginx反向代理自己的博客域名"></a>5、利用Nginx反向代理自己的博客域名</h2><h4 id="Nginx的安装过程就不一一赘述了，利用Nginx可以将域名默认访问的80端口转发到8000端口，从而实现域名直接访问博客"><a href="#Nginx的安装过程就不一一赘述了，利用Nginx可以将域名默认访问的80端口转发到8000端口，从而实现域名直接访问博客" class="headerlink" title="Nginx的安装过程就不一一赘述了，利用Nginx可以将域名默认访问的80端口转发到8000端口，从而实现域名直接访问博客"></a>Nginx的安装过程就不一一赘述了，利用Nginx可以将域名默认访问的80端口转发到8000端口，从而实现域名直接访问博客</h4><ul><li><p>安装完Nginx后 修改<code>/usr/local/nginx/conf/nginx.conf</code>配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">server <span class="hljs-punctuation">&#123;</span><br>        listen       <span class="hljs-number">80</span>;<br>        server_name  www.xxxx.com;<br>        location / <span class="hljs-punctuation">&#123;</span><br>            root   html;<br>            proxy_pass http<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:8000;</span><br>            index  index.html index.htm;<br>        <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>server_name  <a href="http://www.xxxx.com/">www.xxxx.com</a>; 换上自己的域名</p></li><li><p>重新加载nginx配置文件<br><code>/usr/local/nginx/sbin/.nginx -s reload</code></p></li></ul><h4 id="到这一步为止不出意外应该直接通过域名就能访问到wordpress-博客了。"><a href="#到这一步为止不出意外应该直接通过域名就能访问到wordpress-博客了。" class="headerlink" title="到这一步为止不出意外应该直接通过域名就能访问到wordpress 博客了。"></a>到这一步为止不出意外应该直接通过域名就能访问到wordpress 博客了。</h4>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>nginx</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
